// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"github.com/google/wire"
	"github.com/hibiken/asynq"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"rag-searchbot-backend/config"
	"rag-searchbot-backend/internal/ai"
	"rag-searchbot-backend/internal/auth"
	"rag-searchbot-backend/internal/cache"
	"rag-searchbot-backend/internal/llm"
	"rag-searchbot-backend/internal/media"
	"rag-searchbot-backend/internal/notification"
	"rag-searchbot-backend/internal/post"
	"rag-searchbot-backend/internal/queue"
	"rag-searchbot-backend/internal/user"
	"rag-searchbot-backend/internal/ws"
	"rag-searchbot-backend/pkg/crypto"
	"time"
)

// Injectors from wire.go:

func InitializeContainer(env *config.Config, db *gorm.DB, log *zap.Logger, redisClient *redis.Client, redisTTL time.Duration, asynqClient *asynq.Client) (*Container, error) {
	repositoryInterface := user.NewRepository(db)
	postRepositoryInterface := post.NewPostRepository(db)
	notificationRepositoryInterface := notification.NewRepository(db)
	mediaRepositoryInterface := media.NewMediaRepository(db)
	serviceInterface := NewCacheService(redisClient, redisTTL)
	mediaServiceInterface := media.NewMediaService(mediaRepositoryInterface, log)
	userServiceInterface := user.NewService(repositoryInterface, serviceInterface, mediaServiceInterface)
	queueRepositoryInterface := queue.NewRepository(db)
	taskEnqueuer := post.NewTaskEnqueuer(asynqClient, queueRepositoryInterface)
	postServiceInterface := post.NewPostService(postRepositoryInterface, mediaServiceInterface, taskEnqueuer)
	manager := ws.NewManager()
	notificationServiceInterface := notification.NewService(notificationRepositoryInterface, manager)
	serveMux := NewAsynqMux()
	cryptoService := crypto.NewCryptoService()
	authServiceInterface := auth.NewAuthService(userServiceInterface, cryptoService, env)
	container := NewContainer(env, db, log, repositoryInterface, postRepositoryInterface, notificationRepositoryInterface, mediaRepositoryInterface, userServiceInterface, postServiceInterface, notificationServiceInterface, mediaServiceInterface, serviceInterface, manager, queueRepositoryInterface, asynqClient, serveMux, cryptoService, authServiceInterface)
	return container, nil
}

// wire.go:

var postSet = wire.NewSet(post.NewPostRepository, post.NewTaskEnqueuer, post.NewPostService)

var userSet = wire.NewSet(user.NewRepository, user.NewService)

var mediaSet = wire.NewSet(media.NewMediaRepository, media.NewMediaService)

var notificationSet = wire.NewSet(notification.NewRepository, notification.NewService)

var authSet = wire.NewSet(auth.NewAuthService)

var cryptoSet = wire.NewSet(crypto.NewCryptoService)

var queueSet = wire.NewSet(queue.NewRepository)

var asynqSet = wire.NewSet(
	NewAsynqMux,
)

var aiSet = wire.NewSet(ai.NewAgentIntentClassifier)

var llmSet = wire.NewSet(llm.NewBedrockLLM, wire.Bind(new(llm.LLM), new(*llm.BedrockLLM)))

func NewCacheService(redisClient *redis.Client, redisTTL time.Duration) cache.ServiceInterface {
	return cache.NewService(redisClient, redisTTL)
}

func NewAsynqMux() *asynq.ServeMux {
	return asynq.NewServeMux()
}

func NewConfig(cfg *config.Config) config.Config {
	return *cfg
}
